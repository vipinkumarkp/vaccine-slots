{"version":3,"sources":["components/UI/Link/Link.js","components/UI/Nav/Nav.js","components/UI/Header/Header.js","components/UI/Footer/Footer.js","components/sections/VaccineSlot/spinner.js","util/search.js","HOC/Section.js","util/common.js","components/sections/VaccineSlot/index.js","components/Tabs/CoolTabs.js","components/sections/VaccineSlotNew/index.js","components/sections/Sections.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js","assets/mp3/alert.mp3"],"names":["link","props","react_default","a","createElement","modules","className","classes","style","cursor","activeClass","to","target","spy","smooth","offset","duration","children","Nav","_useState","useState","_useState2","Object","slicedToArray","navClass","setNavClass","_useState3","_useState4","toggeledNav","settoggeledNav","useEffect","window","addEventListener","scrollY","concat","href","onClick","Link","pageType","console","log","header","UI_Nav_Nav","footer","SpinnerBlock","Spinner","color","fuzzySearch","options","fuse","Fuse","keys","threshold","value","length","search","section","id","TimeFormat","time","currentDate","Moment","format","HTML5_FMT","DATE","VaccineSlot","_React$useState","React","_React$useState2","states","setStates","_React$useState3","_React$useState4","districts","setDistricts","_React$useState5","_React$useState6","selectedState","setSelectedState","_React$useState7","_React$useState8","selectedDistrict","setSelectedDistrict","_React$useState9","_React$useState10","enableDistrict","setEnableDistrict","_React$useState11","_React$useState12","loader","setLoader","_React$useState13","_React$useState14","availableSlots","setAvailableSlots","modal","setModal","backdrop","_useState5","keyboard","_useState7","_useState8","selectedSlot","setSelectedSlot","_useState9","_useState10","visibleResults","setVisibleResults","_useState11","_useState12","enablePinCode","setEnablePinCode","_useState13","_useState14","selectedPinCode","setSelectedPinCode","toggle","_useState15","_useState16","searchDate","setSearchDate","_useState17","Date","_useState18","startDate","_useState19","_useState20","validationError","setValidationError","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","enableAlert","setEnableAlert","_useState27","_useState28","setAlertFilter","_useState29","Audio","alertMp3","audio","localStorage","setItem","fetchDataByInterval","useCallback","searchBy","dId","url","axios","method","headers","content-type","then","response","data","centers","isAvailableCount","map","slot","key","sessions","session","available_capacity","play","catch","error","_useSound","useSound","volume","_useSound2","fetchSlotByPinCodeData","stop","fetchSlotData","pinCode","state","district","fetchDistrictData","state_id","districtsList","e","i","push","district_id","label","district_name","name","fetchStateData","stateList","state_name","interval","setInterval","getItem","alertFilter","JSON","parse","clearInterval","handleSearch","validationCheck","validationBySearch","filterObj","stringify","getStateFilters","Fragment","SelectSearch","filterOptions","placeholder","onChange","handleAlertSettings","handleDistrictList","getDistrictFilters","handleSetDistrict","handlePincode","event","handleSlotDetails","slotObj","handleAlertSwitch","_useState31","_useState32","getPinCodeSearchButton","Col","sm","mt","alignItems","justifyContent","maxHeight","spinner","ButtonToggle","Section","Row","md","lg","display","react_switch_default","checked","xs","type","evt","height","htmlFor","handleDiameter","width","borderRadius","uncheckedIcon","index_esm","checkedIcon","uncheckedHandleIcon","checkedHandleIcon","dist","availableCapacity","btnColor","fee_type","Badge","pill","from","slotsAvailable","slots","Modal","isOpen","ModalHeader","address","ModalBody","date","vaccine","min_age_limit","keyId","ModalFooter","Button","getModalData","TabPanel","_ref","content","Tab","_this$props","this","setCurrentTab","index","_this$props2","text","isSelected","_handleClick","bind","Component","sections","react","sections_VaccineSlot","Layout","Header","minHeight","Sections","Footer","App","components_Layout_Layout","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oSAoBeA,EAjBF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEC,UAAWL,EAAMM,QACjBC,MAAO,CAAEC,OAAQ,WACjBC,YAAY,SACZC,GAAIV,EAAMW,OACVC,KAAK,EACLC,QAAQ,EACRC,OAAQd,EAAMc,SAAW,GACzBC,SAAU,KAETf,EAAMgB,WCiDEC,EA5DH,WACV,IAAAC,EAAgCC,mBAAS,IAAzCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAiBI,EAAjBJ,EAAA,GACAK,EAAsCN,oBAAS,GAA/CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GAoBA,OATAG,oBAAU,WACRC,OAAOC,iBAAiB,SAAU,WAChC,IAAIR,EAAW,GACXO,OAAOE,SAAW,MACpBT,EAAW,YAEbC,EAAYD,MAEb,IAEDtB,EAAAC,EAAAC,cAAA,OAAKE,UAAS,oCAAA4B,OAAsCV,IAClDtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,eAAe6B,KAAK,KAC/BjC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,wBAEfJ,EAAAC,EAAAC,cAAA,OACEE,UAAS,2BAAA4B,OACHN,EAAoB,OACjB,IAETQ,QA9BU,WAChBP,GAAgBD,KA+BV1B,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,cAGFF,EAAAC,EAAAC,cAAA,OACEE,UAAS,4BAAA4B,OACHN,EAAoB,OACjB,KAGT1B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,sBACZJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YACZJ,EAAAC,EAAAC,cAACiC,EAAD,CAAMD,QAAS,kBAzCPE,EAyCwB,oBAxC1CC,QAAQC,IAAI,OAAQF,GADH,IAACA,GAyCyC1B,OAAO,IAAIG,QAAS,IAAKR,QAAQ,YAAlF,4BCzCCkC,EARA,WACb,OACEvC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAACsC,EAAD,QCKSC,EAVA,WACb,OACEzC,EAAAC,EAAAC,cAAA,UAAQE,UAAU,IAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uCACbJ,EAAAC,EAAAC,cAAA,2MCKOwC,EARM,SAAC3C,GACpB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAASC,MAAM,kECJN,SAASC,EAAYC,GAChC,IAAMC,EAAO,IAAIC,IAAKF,EAAS,CAC3BG,KAAM,CAAC,OAAQ,YAAa,cAC5BC,UAAW,KAGf,OAAO,SAACC,GACJ,OAAKA,EAAMC,OAIJL,EAAKM,OAAOF,GAHRL,GCRnB,IAIeQ,EAJC,SAAAvD,GACd,OAAOC,EAAAC,EAAAC,cAAA,WAASqD,GAAIxD,EAAMwD,IAAKxD,EAAMgB,wBCFxB,SAASyC,EAAWC,GAChC,IAAMC,EAAcC,MAASC,OAAOD,IAAOE,UAAUC,MACrD,OAAOH,IAAOD,EAAc,IAAID,GAAMG,OAAO,gFC+xBjCG,MA/vBf,SAAqBhE,GACnB,IAAAiE,EAA0BC,IAAM/C,SAAS,IAAzCgD,EAAA9C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAAKG,EAALD,EAAA,GAAaE,EAAbF,EAAA,GACAG,EAAgCJ,IAAM/C,SAAS,IAA/CoD,EAAAlD,OAAAC,EAAA,EAAAD,CAAAiD,EAAA,GAAKE,EAALD,EAAA,GAAgBE,EAAhBF,EAAA,GACAG,EAAwCR,IAAM/C,SAAS,IAAvDwD,EAAAtD,OAAAC,EAAA,EAAAD,CAAAqD,EAAA,GAAKE,EAALD,EAAA,GAAoBE,EAApBF,EAAA,GACAG,EAA8CZ,IAAM/C,SAAS,IAA7D4D,EAAA1D,OAAAC,EAAA,EAAAD,CAAAyD,EAAA,GAAKE,EAALD,EAAA,GAAuBE,EAAvBF,EAAA,GACAG,EAA0ChB,IAAM/C,UAAS,GAAzDgE,EAAA9D,OAAAC,EAAA,EAAAD,CAAA6D,EAAA,GAAKE,EAALD,EAAA,GAAqBE,EAArBF,EAAA,GACAG,EAA0BpB,IAAM/C,UAAS,GAAzCoE,EAAAlE,OAAAC,EAAA,EAAAD,CAAAiE,EAAA,GAAKE,EAALD,EAAA,GAAaE,EAAbF,EAAA,GACAG,EAA0CxB,IAAM/C,SAAS,IAAzDwE,EAAAtE,OAAAC,EAAA,EAAAD,CAAAqE,EAAA,GAAKE,EAALD,EAAA,GAAqBE,EAArBF,EAAA,GACAzE,EAA0BC,oBAAS,GAAnCC,GAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAO4E,GAAP1E,GAAA,GAAc2E,GAAd3E,GAAA,GACAK,GAAmBN,oBAAS,GAArB6E,GAAP3E,OAAAC,EAAA,EAAAD,CAAAI,GAAA,MACAwE,GAAmB9E,oBAAS,GAArB+E,GAAP7E,OAAAC,EAAA,EAAAD,CAAA4E,GAAA,MACAE,GAAwChF,mBAAS,IAAjDiF,GAAA/E,OAAAC,EAAA,EAAAD,CAAA8E,GAAA,GAAOE,GAAPD,GAAA,GAAqBE,GAArBF,GAAA,GACAG,GAA4CpF,oBAAS,GAArDqF,GAAAnF,OAAAC,EAAA,EAAAD,CAAAkF,GAAA,GAAOE,GAAPD,GAAA,GAAuBE,GAAvBF,GAAA,GACAG,GAA0CxF,oBAAS,GAAnDyF,GAAAvF,OAAAC,EAAA,EAAAD,CAAAsF,GAAA,GAAOE,GAAPD,GAAA,GAAsBE,GAAtBF,GAAA,GACAG,GAA8C5F,mBAAS,IAAvD6F,GAAA3F,OAAAC,EAAA,EAAAD,CAAA0F,GAAA,GAAOE,GAAPD,GAAA,GAAwBE,GAAxBF,GAAA,GACQ3G,GAAcL,EAAdK,UACF8G,GAAS,kBAAMpB,IAAUD,KAC/BsB,GAAoCjG,mBAASyC,MAASC,OAAO,aAA7DwD,GAAAhG,OAAAC,EAAA,EAAAD,CAAA+F,GAAA,GAAOE,GAAPD,GAAA,GAAmBE,GAAnBF,GAAA,GACAG,GAAkCrG,mBAAS,IAAIsG,MAA/CC,GAAArG,OAAAC,EAAA,EAAAD,CAAAmG,GAAA,GAAOG,GAAPD,GAAA,GACAE,IADAF,GAAA,GAC8CvG,mBAAS,KAAvD0G,GAAAxG,OAAAC,EAAA,EAAAD,CAAAuG,GAAA,GAAOE,GAAPD,GAAA,GAAwBE,GAAxBF,GAAA,GACAG,GAAoC7G,mBAAS,IAAIsG,MAAjDQ,GAAA5G,OAAAC,EAAA,EAAAD,CAAA2G,GAAA,GACAE,IADAD,GAAA,GAAAA,GAAA,GAC8B9G,oBAAS,IAAvCgH,GAAA9G,OAAAC,EAAA,EAAAD,CAAA6G,GAAA,GACAE,IADAD,GAAA,GAAAA,GAAA,GACsChH,oBAAS,IAA/CkH,GAAAhH,OAAAC,EAAA,EAAAD,CAAA+G,GAAA,GAAOE,GAAPD,GAAA,GAAoBE,GAApBF,GAAA,GACAG,GAAsCrH,mBAAS,IAA/CsH,GAAApH,OAAAC,EAAA,EAAAD,CAAAmH,GAAA,GAAoBE,IAApBD,GAAA,GAAAA,GAAA,IAEAE,GAAgBxH,mBAAS,IAAIyH,MAAMC,MAA5BC,GAAPzH,OAAAC,EAAA,EAAAD,CAAAsH,GAAA,MACAzE,IAAMrC,UAAU,WACdkH,aAAaC,QAAQ,eAAe,GACpCD,aAAaC,QAAQ,cAAe,KACnC,IAEH,IAAMC,GAAsB/E,IAAMgF,YAAY,SAACC,EAAUC,GACvD3D,GAAU,GACV,IAAI4D,EAAM,+FAAiGD,EAAM,SAAW9B,GACxH6B,GAAyB,YAAbA,IACdE,EAAM,sFAAwFD,EAAM,SAAW9B,IAEjHgC,IAAM,CACJC,OAAQ,MACRF,IAAKA,EACLG,QAAS,CACPC,eAAgB,sBAGjBC,KAAK,SAACC,GAEL,GAAIA,EAASC,KAAKC,SAAWF,EAASC,KAAKC,QAAQxG,OAAS,EAAG,CAC7D,IAAIyG,EAAmB,EAEvBH,EAASC,KAAKC,QAAQE,IAAI,SAACC,EAAMC,GAC/BD,EAAKE,SAASH,IAAI,SAACI,GAEjB,OADAL,GAAoBK,EAAQC,oBACrB,MAIPN,GAAoBA,EAAmB,GACzCxH,QAAQC,IAAI,cAAeuH,GAC3BhB,GAAMuB,QAEN/H,QAAQC,IAAI,iBAAkBuH,GAIlCjE,EAAkB8D,EAASC,KAAKC,SAChCpE,GAAU,GACViB,IAAkB,KAEnB4D,MAAM,SAACC,GACN9E,GAAU,GACViB,IAAkB,MAErB,IAEH8D,GAAyBC,YACvB,wDACA,CAAEC,OAAQ,KAFZC,GAAAtJ,OAAAC,EAAA,EAAAD,CAAAmJ,GAAA,GASMI,IATND,GAAA,GAAAA,GAAA,GAAeE,KASgB3G,IAAMgF,YAAY,SAACE,GAChD3D,GAAU,GACV6D,IAAM,CACJC,OAAQ,MACRF,IACE,sFAAwFD,EAAM,SAAW9B,GAC3GkC,QAAS,CACPC,eAAgB,sBAGjBC,KAAK,SAACC,GAEL9D,EAAkB8D,EAASC,KAAKC,SAChCpE,GAAU,GACViB,IAAkB,KAEnB4D,MAAM,SAACC,GACN9E,GAAU,GACViB,IAAkB,MAErB,CAACY,MAGEwD,GAAgB5G,IAAMgF,YAAY,SAACE,GACvC3D,GAAU,GACV6D,IAAM,CACJC,OAAQ,MACRF,IACE,+FACAD,EACA,SACA9B,GACFkC,QAAS,CACPC,eAAgB,sBAGjBC,KAAK,SAACC,GAELjB,GAAe,CACbqC,QAAS,GACTC,MAAOpG,EACPqG,SAAUjG,IAEZa,EAAkB8D,EAASC,KAAKC,SAChCpE,GAAU,GACViB,IAAkB,KAEnB4D,MAAM,SAACC,GACN9E,GAAU,GACViB,IAAkB,MAErB,CAACY,KAEE4D,GAAoBhH,IAAMgF,YAAY,SAACiC,GAC3C1F,GAAU,GACV6D,IAAM,CACJC,OAAQ,MACRF,IACE,6DAA+D8B,EACjE3B,QAAS,CACPC,eAAgB,sBAGjBC,KAAK,SAACC,GACL,IAAIyB,EAAgB,GAChBzB,EAASC,KAAKpF,WAChBmF,EAASC,KAAKpF,UAAUuF,IAAI,SAACsB,EAAGC,GAAJ,OAC1BF,EAAcG,KAAK,CACjB/H,GAAI6H,EAAEG,YACNpI,MAAOiI,EAAEG,YACTC,MAAOJ,EAAEK,cACTC,KAAMN,EAAEK,kBAIdrG,GAAkB,GAClBZ,EAAa2G,GACb3F,GAAU,KAEX6E,MAAM,SAACC,GACN9E,GAAU,MAEb,IAEGmG,GAAiB1H,IAAMgF,YAAY,WACvCzD,GAAU,GACV6D,IAAM,CACJC,OAAQ,MACRF,IAAK,yDACLG,QAAS,CACPC,eAAgB,sBAGjBC,KAAK,SAACC,GACL,IAAIkC,EAAY,GACZlC,EAASC,KAAKxF,QAChBuF,EAASC,KAAKxF,OAAO2F,IAAI,SAACsB,EAAGC,GAAJ,OACvBO,EAAUN,KAAK,CACb/H,GAAI6H,EAAEF,SACN/H,MAAOiI,EAAEF,SACTM,MAAOJ,EAAES,WACTH,KAAMN,EAAES,eAIdzH,EAAUwH,GACVpG,GAAU,KAEX6E,MAAM,SAACC,GACN9E,GAAU,MAEb,IACHvB,IAAMrC,UAAU,WACd,IAAMkK,EAAWC,YAAY,WAE3B,GAAyB,SADAjD,aAAakD,QAAQ,eACb,CAC/B,IAAMC,EAAcC,KAAKC,MAAMrD,aAAakD,QAAQ,gBAChDC,IACEA,EAAYnB,QACd9B,GAAoB,UAAWiD,EAAYnB,SAClCmB,EAAYjB,UACrBhC,GAAoB,GAAIiD,EAAYjB,aApLxB,MAyLpB,OAAO,kBAAMoB,cAAcN,KAC1B,IACH7H,IAAMrC,UAAU,WACd+J,MACC,CAACA,KAEJ,IA0CMU,GAAe,SAACnD,GACpB,IAAMoD,EAxBmB,SAACpD,GAC1B,IAAIrB,GAAkB,EAmBtB,OAlBAC,GAAmB,IACfoB,GAAyB,YAAbA,GACd7G,QAAQC,IAAI,cAAe0E,GAAgB5D,QACnB,KAApB4D,IAAsD,IAA3BA,GAAgB5D,QAC7C0E,GAAmB,8BACnBD,GAAkB,GAElBC,GAAmB,KAGC,KAAlBnD,GACFkD,GAAkB,EAClBC,GAAmB,wBACW,KAArB/C,IACT8C,GAAkB,EAClBC,GAAmB,2BAGhBD,EAIiB0E,CAAmBrD,GAG3C,GAFA7G,QAAQC,IAAI,mBAAoBqB,IAAO+D,IAAW9D,OAAO,aACzD0D,GAAc3D,IAAO+D,IAAW9D,OAAO,cAClC0I,EACH,GAAIpD,GAAyB,YAAbA,EAAwB,CACtC7G,QAAQC,IAAI,gBAAiB0E,IAC7ByB,GAAe,CACbqC,QAAW9D,GACX+D,MAAS,GACTC,SAAY,KAEd,IAAMwB,EAAY,CAChB1B,QAAS9D,GACTgE,SAAU,IAEZlC,aAAaC,QAAQ,cAAemD,KAAKO,UAAUD,IAEnD7B,GAAuB3D,QAElB,CACL,IAAMwF,EAAY,CAChB1B,QAAS,GACTE,SAAUjG,GAEZ+D,aAAaC,QAAQ,cAAemD,KAAKO,UAAUD,IACnD3B,GAAc9F,KAcd2H,GAAkB,WACtB,OAAQ1M,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0M,SAAA,KACN3M,EAAAC,EAAAC,cAAC0M,EAAA,EAAD,CACE9J,QAASqB,EACTd,QAAM,EACNwJ,cAAehK,EACfiK,YAAY,oBACZC,SAAU,SAAC5J,GAAD,OAzFW,SAACA,GAC1BiC,GAAkB,GAClB6F,GAAkB9H,GAClByB,EAAiBzB,GACjBsD,IAAkB,GAClBqB,GAAmB,IAEnBzF,QAAQC,IAAIqC,GACZqI,KAiFyBC,CAAmB9J,QAMxC+J,GAAqB,WACzB,OACElN,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0M,SAAA,KAAE3M,EAAAC,EAAAC,cAAC0M,EAAA,EAAD,CACA9J,QAASyB,EACTlB,QAAM,EACNwJ,cAAehK,EACfiK,YAAY,uBACZC,SAAU,SAAC5J,GAAD,OA3FU,SAACA,GACzB6B,EAAoB7B,GACpBsD,IAAkB,GAClBqB,GAAmB,IAEnBkF,KAsFyBG,CAAkBhK,QAsBvCiK,GAAgB,SAACC,GACrBpG,GAAmBoG,EAAM3M,OAAOyC,OAChC6B,EAAoB,KAIhBsI,GAAoB,SAACC,GACzBlH,GAAgBkH,GAChBrG,MAaI8F,GAAsB,WAC1BlE,aAAaC,QAAQ,eAAe,GACpCD,aAAaC,QAAQ,cAAe,IACpCT,IAAe,IAYXkF,GAAoB,WACxBlF,IAAgBD,IAChBS,aAAaC,QAAQ,eAAgBV,KAWvCoF,GAAsCvM,oBAAS,GAA/CwM,GAAAtM,OAAAC,EAAA,EAAAD,CAAAqM,GAAA,GAyGME,IAzGND,GAAA,GAAAA,GAAA,GAyG+B,WAC7B,OACE1N,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CACEC,GAAI,EACJzN,UAAU,OACV0N,GAAI,EACJxN,MAAO,CAAEyN,WAAY,SAAUC,eAAgB,WAE/ChO,EAAAC,EAAAC,cAAA,SAAOI,MAAO,CAAE2N,UAAW,OAAQrL,MAAO,QAAUiF,IACpD7H,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACZmF,EACCvF,EAAAC,EAAAC,cAACgO,EAAD,MAEAlO,EAAAC,EAAAC,cAACiO,EAAA,EAAD,CACEvL,MAAM,UACNV,QAAS,WACPmK,GAAa,aAHjB,cAoNV,OACErM,EAAAC,EAAAC,cAACkO,EAAD,CAAS7K,GAAG,WACVvD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yCACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uCACbJ,EAAAC,EAAAC,cAACmO,EAAA,EAAD,KACErO,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKU,GAAI,GAAIC,GAAI,GAAIjO,MAAO,CAAEkO,QAAS,SACrCxO,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAd,iBACiB,IACfJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAhB,mBAINJ,EAAAC,EAAAC,cAACmO,EAAA,EAAD,KACErO,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKU,GAAI,GAAIC,GAAI,GAAIjO,MAAO,CAAEkO,QAAS,QAAUpO,UAAU,QACzDJ,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKU,GAAI,EAAGC,GAAI,EAAGnO,UAAU,qBAI7BJ,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKU,GAAI,EAAGC,GAAI,EAAGnO,UAAU,sBAnXzCJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACuO,EAAAxO,EAAD,CAAQ8M,SAAU,kBAnBtBtG,IAAkB,GAClBrB,GAAkB,GAClByB,IAAkBD,IAClB5B,EAAoB,IACpBJ,EAAiB,IACjBkD,GAAmB,SACnBkF,MAakD0B,QAAS9H,SAuXjD5G,EAAAC,EAAAC,cAACmO,EAAA,EAAD,KACErO,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKe,GAAI,GAAIJ,GAAI,IACfvO,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAACmO,EAAA,EAAD,KACGzH,GAxajB5G,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0M,SAAA,KAAE3M,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKxN,UAAU,aAAakO,GAAI,EAAGC,GAAI,GACvCvO,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAO0O,KAAK,SAASxO,UAAU,eAAemD,GAAG,UAAUuJ,YAAY,gBAAgBC,SAAU,SAAC8B,GAAD,OAASzB,GAAcyB,QAGvH,EAIAlB,MA8QG3N,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0M,SAAA,KAAE3M,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKC,GAAI,EAAGzN,UAAU,OAAO0N,GAAI,GACzC9N,EAAAC,EAAAC,cAAA,mBACCwM,MAEAvH,GAAkBnF,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKC,GAAI,EAAGzN,UAAU,OAAO0N,GAAI,GAClD9N,EAAAC,EAAAC,cAAA,sBACCgN,OAGF,EA3FDlN,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CACEC,GAAI,EACJzN,UAAU,OACV0N,GAAI,EACJxN,MAAO,CAAEyN,WAAY,WAAYC,eAAgB,WAEjDhO,EAAAC,EAAAC,cAAA,SAAOI,MAAO,CAAEwO,OAAQ,OAAQlM,MAAO,QAAUiF,IACjD7H,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACZmF,EACCvF,EAAAC,EAAAC,cAACgO,EAAD,MAEAlO,EAAAC,EAAAC,cAACiO,EAAA,EAAD,CACEvL,MAAM,UACNV,QAAS,WACPmK,OAHJ,cAsBN7F,IACAxG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAd,mBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAACmO,EAAA,EAAD,KACErO,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKW,GAAI,EAAGD,GAAI,EAAGT,GAAI,GACpBlI,GAAkBA,EAAevC,OAAS,GAAMpD,EAAAC,EAAAC,cAAA,iBACzC,IACNF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,YAAOyF,GAAkBA,EAAevC,QAAe,KAHV,uCASnDpD,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKW,GAAI,EAAGD,GAAI,EAAGT,GAAI,EAAGvN,MAAO,CAACkO,QAAS,OAAOT,WAAY,SAAUC,eAAgB,aAhK9FhO,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0M,SAAA,KAAE3M,EAAAC,EAAAC,cAAA,4BAA0B,KAA5B,IAAmC,KACrCF,EAAAC,EAAAC,cAAA,SAAO6O,QAAQ,sBAAsB3O,UAAU,iBAEjDJ,EAAAC,EAAAC,cAACuO,EAAAxO,EAAD,CACEyO,QAASrG,GACT0E,SAAU,kBAAMS,MAChBwB,eAAgB,GAKhBF,OAAQ,GACRG,MAAO,GACPC,aAAc,GAEdC,cAAenP,EAAAC,EAAAC,cAACkP,EAAA,EAAD,MACfC,YAAarP,EAAAC,EAAAC,cAACkP,EAAA,EAAD,MACbE,oBAAqBtP,EAAAC,EAAAC,cAACkP,EAAA,EAAD,MACrBG,kBAAmBvP,EAAAC,EAAAC,cAACkP,EAAA,EAAD,MACnBhP,UAAU,eACVmD,GAAG,4BAgJGvD,EAAAC,EAAAC,cAACmO,EAAA,EAAD,KACArO,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CAAKU,GAAI,GAAIC,GAAI,IACd5I,GAAkBA,EAAevC,OAAS,EAzIjDpD,EAAAC,EAAAC,cAACsP,EAAA,MAAD,KACExP,EAAAC,EAAAC,cAACsP,EAAA,MAAD,KACExP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,KACExP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,UACAxP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,eACAxP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,YACAxP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,qBACAxP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,aACAxP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,iBAGJxP,EAAAC,EAAAC,cAACsP,EAAA,MAAD,KACG7J,EAAemE,IAAI,SAACC,EAAMC,GACzB,IAAIyF,EAAoB,EACxB1F,EAAKE,SAASH,IAAI,SAACI,GAEjB,OADAuF,GAAqBvF,EAAQC,oBACtB,IAET,IAAIuF,EAAW,UAQf,OAPID,EAAoB,IAAMA,EAAoB,EAChDC,EAAW,SACFD,EAAoB,IAAMA,EAAoB,GACvDC,EAAW,UACoB,IAAtBD,IACTC,EAAW,QAGX1P,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIxF,IAAK,QAAUA,EAAK5J,UAAWqP,EAAoB,EAAI,YAAc,IACvEzP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QAAQ4J,EAAM,GAC5BhK,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QAAQ2J,EAAK2B,MAG3B1L,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QAAQ2J,EAAK4F,UAC3B3P,EAAAC,EAAAC,cAACsP,EAAA,GAAD,KAEExP,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CAAOC,MAAI,EAACjN,MAAO8M,EAAUxN,QAAS,kBAAMoL,GAAkBvD,KAC3D0F,IAGLzP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QACXoD,EAAWuG,EAAK+F,MADnB,MAC6BtM,EAAWuG,EAAKtJ,KAE7CT,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,OAAOE,MAAO,CAAEC,OAAQ,YACpCP,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CAAOhN,MAAM,OAAOV,QAAS,kBAAMoL,GAAkBvD,KAArD,iBAgGA,4DAuLTlE,IAzIc,WACnB,IAAIkK,EAAiB,EAKrB,OAJA3J,GAAa6D,SAASH,IAAI,SAACI,GAEzB,OADA6F,GAAkB7F,EAAQ8F,MAAM5M,QACzB,IAGPpD,EAAAC,EAAAC,cAAC+P,EAAA,EAAD,CACEC,OAAQrK,GACRqB,OAAQA,GACR9G,UAAWA,GACX2F,SAAUA,GACVE,SAAUA,IAEVjG,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,CAAajJ,OAAQA,IAAQlH,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,SAAIkG,IAAgBA,GAAasF,MAAvC,MAAoDtF,IAAgBA,GAAagK,QAAjF,KAA2FpQ,EAAAC,EAAAC,cAAA,SAAI6P,GAA/F,YAE7B/P,EAAAC,EAAAC,cAACmQ,EAAA,EAAD,KACErQ,EAAAC,EAAAC,cAACsP,EAAA,MAAD,KACExP,EAAAC,EAAAC,cAACsP,EAAA,MAAD,KACExP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,KACExP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIlP,MAAO,CAAE2O,MAAO,QAApB,QACAjP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIlP,MAAO,CAAE2O,MAAO,QAApB,WACAjP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIlP,MAAO,CAAE2O,MAAO,QAApB,YACAjP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIlP,MAAO,CAAE2O,MAAO,QAApB,gBACAjP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,gBAGJxP,EAAAC,EAAAC,cAACsP,EAAA,MAAD,KACGpJ,GAAa6D,SAASH,IAAI,SAACI,EAASF,GACnC,IAAI0F,EAAW,UACTD,EAAoBvF,EAAQC,mBAQlC,OAPIsF,EAAoB,IAAMA,EAAoB,EAChDC,EAAW,SACFD,EAAoB,IAAMA,EAAoB,GACvDC,EAAW,UACoB,IAAtBD,IACTC,EAAW,QAGX1P,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIxF,IAAK,eAAiBA,GACxBhK,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QAAQ8J,EAAQoG,MAC9BtQ,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QAAOJ,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CAAO3N,KAAK,IAAIW,MAAM,QAAQsH,EAAQqG,UAC3DvQ,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QAAQ8J,EAAQsG,cAA9B,KACAxQ,EAAAC,EAAAC,cAACsP,EAAA,GAAD,KACExP,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CAAOC,MAAI,EAACjN,MAAO8M,GAChBD,IAGLzP,EAAAC,EAAAC,cAACsP,EAAA,GAAD,CAAIpP,UAAU,QACX8J,EAAQ8F,MAAMlG,IAAI,SAACC,EAAM0G,GACxB,OAAQzQ,EAAAC,EAAAC,cAAA,QAAM8J,IAAK,YAAcyG,GAAOzQ,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CAAOC,MAAI,EAAC5N,KAAK,IAAIW,MAAM,WAAWmH,GAAtE,IAAqF,cAU7G/J,EAAAC,EAAAC,cAACwQ,EAAA,EAAD,KACE1Q,EAAAC,EAAAC,cAACyQ,EAAA,EAAD,CAAQ/N,MAAM,YAAYV,QAASgF,IAAnC,YA4EQ0J,+CC9uBVC,UAAW,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACf/Q,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,SAAI6Q,MAQFC,oKACJ,SAAa5F,GACX,IAAA6F,EAAiCC,KAAKnR,OACtCoR,EADAF,EAAQE,eAARF,EAAuBG,6BAIzB,WACE,IAAAC,EAA6BH,KAAKnR,MAA1BuR,EAARD,EAAQC,KAAMC,EAAdF,EAAcE,WACd,OACEvR,EAAAC,EAAAC,cAAC0N,EAAA,EAAD,CACEU,GAAG,IACHC,GAAG,IACHnO,UAAS,MAAA4B,OAAQuP,EAAa,eAAiB,IAC/CrP,QAASgP,KAAKM,aAAaC,KAAKP,OAC/BI,UAdSrN,IAAMyN,WAyBGzN,IAAMyN,UC0qBpB3N,IC9uBA4N,EATE,WACf,OACE3R,EAAAC,EAAAC,cAAC0R,EAAA,SAAD,KACE5R,EAAAC,EAAAC,cAAC2R,EAAD,QCWSC,EAZA,WACb,OACE9R,EAAAC,EAAAC,cAAC0R,EAAA,SAAD,KACE5R,EAAAC,EAAAC,cAAC6R,EAAD,MACA/R,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAAC0R,UAAW,UACvBhS,EAAAC,EAAAC,cAAC+R,EAAD,OAEFjS,EAAAC,EAAAC,cAACgS,EAAD,QCLSC,MAJf,WACE,OAAOnS,EAAAC,EAAAC,cAACkS,EAAD,OCOWC,QACW,cAA7BxQ,OAAOyQ,SAASC,UAEe,UAA7B1Q,OAAOyQ,SAASC,UAEhB1Q,OAAOyQ,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO1S,EAAAC,EAAAC,cAACyS,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvJ,KAAK,SAAAwJ,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.000a97ed.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-scroll';\n\nconst link = props => {\n  return (\n    <Link\n      className={props.classes}\n      style={{ cursor: 'pointer' }}\n      activeClass='active'\n      to={props.target}\n      spy={true}\n      smooth={true}\n      offset={props.offset || -45}\n      duration={500}\n    >\n      {props.children}\n    </Link>\n  );\n};\n\nexport default link;\n","import React, { useState, useEffect } from 'react';\n\nimport Link from '../Link/Link';\n\nconst Nav = () => {\n  const [navClass, setNavClass] = useState('');\n  const [toggeledNav, settoggeledNav] = useState(false);\n\n  const toggleNav = () => {\n    settoggeledNav(!toggeledNav);\n  };\n\n  const handleMenu = (pageType) => {\n    console.log('page', pageType)\n\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      let navClass = '';\n      if (window.scrollY >= 200) {\n        navClass = 'scrolled';\n      }\n      setNavClass(navClass);\n    });\n  }, []);\n  return (\n    <nav className={`navbar navbar-expand-md bg-light ${navClass}`}>\n      <div className='container'>\n        <a className='navbar-brand' href='#'>\n          <span>Vaccine Slot</span>\n          <i className='fas fa-circle ml-1' />\n        </a>\n        <div\n          className={`navbar-toggler nav-icon ${(() => {\n            if (toggeledNav) return 'open';\n            return '';\n          })()}`}\n          onClick={toggleNav}\n        >\n          <span />\n          <span />\n          <span />\n        </div>\n\n        <div\n          className={`collapse navbar-collapse ${(() => {\n            if (toggeledNav) return 'show';\n            return '';\n          })()}`}\n        >\n          <ul className='navbar-nav ml-auto'>\n            <li className='nav-item'>\n              <Link onClick={() => handleMenu('vaccine-slot')} target='/' offset={-120} classes='nav-link'>\n                Vaccination Center\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\n\nimport Nav from '../Nav/Nav';\n\nconst header = () => {\n  return (\n    <div className='header'>\n      <Nav />\n    </div>\n  );\n};\n\nexport default header;\n","import React from 'react';\n\nconst footer = () => {\n  return (\n    <footer className=''>\n      <div className='bottom-footer pt-3 pb-3 text-center'>\n        <small>©2021 All Right Reserved. Developed By Vipinkumar</small>\n      </div>\n    </footer>\n  );\n};\n\nexport default footer;\n","import React from 'react';\nimport { Spinner } from 'reactstrap';\n\nconst SpinnerBlock = (props) => {\n  return (\n    <div>\n      <Spinner color=\"primary\" />\n    </div>\n  );\n}\n\nexport default SpinnerBlock;","import Fuse from 'fuse.js';\n\nexport default function fuzzySearch(options) {\n    const fuse = new Fuse(options, {\n        keys: ['name', 'groupName', 'items.name'],\n        threshold: 0.3,\n    });\n\n    return (value) => {\n        if (!value.length) {\n            return options;\n        }\n\n        return fuse.search(value);\n    };\n}","import React from 'react';\n\nconst section = props => {\n  return <section id={props.id}>{props.children}</section>;\n};\n\nexport default section;\n","import Moment from 'moment';\nexport default function TimeFormat(time) {\n   const currentDate = Moment().format(Moment.HTML5_FMT.DATE); \n   return Moment(currentDate + ' '+time).format('LT');;\n}","import React, { useState, useInterval } from \"react\";\nimport axios from \"axios\";\nimport { Table, Thead, Tbody, Tr, Th, Td } from \"react-super-responsive-table\";\nimport {\n  Row,\n  Col,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Tooltip,\n  ModalFooter,\n  Badge,\n} from \"reactstrap\";\nimport \"react-dropdown-now/style.css\";\nimport { ButtonToggle } from \"reactstrap\";\nimport SpinnerBlock from \"./spinner\";\nimport Moment from \"moment\";\nimport SelectSearch from \"react-select-search\";\nimport \"react-select-search/style.css\";\nimport fuzzySearch from \"../../../util/search\";\nimport Section from \"../../../HOC/Section\";\nimport \"./index.scss\";\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\nimport TimeFormat from '../../../util/common';\nimport Switch from \"react-switch\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"checkboxes/dist/css/checkboxes.min.css\";\n// import DatePicker from 'react-date-picker';\nimport useSound from 'use-sound';\n\nimport alertMp3 from '../../../assets/mp3/alert.mp3';\nimport { FcInfo, FcSpeaker, FcCancel, FcOk } from \"react-icons/fc\";\n\nfunction VaccineSlot(props) {\n  let [states, setStates] = React.useState([]);\n  let [districts, setDistricts] = React.useState([]);\n  let [selectedState, setSelectedState] = React.useState('');\n  let [selectedDistrict, setSelectedDistrict] = React.useState('');\n  let [enableDistrict, setEnableDistrict] = React.useState(false);\n  let [loader, setLoader] = React.useState(false);\n  let [availableSlots, setAvailableSlots] = React.useState([]);\n  const [modal, setModal] = useState(false);\n  const [backdrop] = useState(true);\n  const [keyboard] = useState(true);\n  const [selectedSlot, setSelectedSlot] = useState([]);\n  const [visibleResults, setVisibleResults] = useState(false);\n  const [enablePinCode, setEnablePinCode] = useState(false);\n  const [selectedPinCode, setSelectedPinCode] = useState('');\n  const { className } = props;\n  const toggle = () => setModal(!modal);\n  const [searchDate, setSearchDate] = useState(Moment().format(\"DD/MM/YY\"));\n  const [startDate, setStartDate] = useState(new Date());\n  const [validationError, setValidationError] = useState('');\n  const [selectDate, setSelectDate] = useState(new Date());\n  const [checked, setChecked] = useState(true);\n  const [enableAlert, setEnableAlert] = useState(false);\n  const [alertFilter, setAlertFilter] = useState({})\n  const alertInterval = 150000;\n  const [audio] = useState(new Audio(alertMp3));\n  React.useEffect(() => {\n    localStorage.setItem('enableAlert', false);\n    localStorage.setItem('alertFilter', '')\n  }, []);\n  // set interval alert data\n  const fetchDataByInterval = React.useCallback((searchBy, dId) => {\n    setLoader(true);\n    let url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=\" + dId + \"&date=\" + searchDate;\n    if (searchBy && searchBy === 'pincode') {\n      url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin?pincode=\" + dId + \"&date=\" + searchDate;\n    }\n    axios({\n      method: \"GET\",\n      url: url,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        // if (response.data.centers)\n        if (response.data.centers && response.data.centers.length > 0) {\n          let isAvailableCount = 0;\n\n          response.data.centers.map((slot, key) => {\n            slot.sessions.map((session) => {\n              isAvailableCount += session.available_capacity;\n              return true;\n            });\n          });\n\n          if (isAvailableCount && isAvailableCount > 0) {\n            console.log('here alert ', isAvailableCount);\n            audio.play();\n          } else {\n            console.log('here no alert ', isAvailableCount);\n          }\n\n        }\n        setAvailableSlots(response.data.centers);\n        setLoader(false);\n        setVisibleResults(true);\n      })\n      .catch((error) => {\n        setLoader(false);\n        setVisibleResults(false);\n      });\n  }, []);\n\n  const [play, { stop }] = useSound(\n    \"http://localhost:3000/static/media/alert.0bd3827c.mp3\",\n    { volume: 0.5 }\n  );\n\n\n\n\n  // Fetch data from API - https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByPin?pincode=110001&date=31-03-2021\n  const fetchSlotByPinCodeData = React.useCallback((dId) => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url:\n        \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin?pincode=\" + dId + \"&date=\" + searchDate,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        // if (response.data.centers)\n        setAvailableSlots(response.data.centers);\n        setLoader(false);\n        setVisibleResults(true);\n      })\n      .catch((error) => {\n        setLoader(false);\n        setVisibleResults(false);\n      });\n  }, [searchDate]);\n\n\n  const fetchSlotData = React.useCallback((dId) => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url:\n        \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=\" +\n        dId +\n        \"&date=\" +\n        searchDate,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        // if (response.data.centers)\n        setAlertFilter({\n          pinCode: '',\n          state: selectedState,\n          district: selectedDistrict\n        })\n        setAvailableSlots(response.data.centers);\n        setLoader(false);\n        setVisibleResults(true);\n      })\n      .catch((error) => {\n        setLoader(false);\n        setVisibleResults(false);\n      });\n  }, [searchDate]);\n\n  const fetchDistrictData = React.useCallback((state_id) => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url:\n        \"https://cdn-api.co-vin.in/api/v2/admin/location/districts/\" + state_id,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        let districtsList = [];\n        if (response.data.districts) {\n          response.data.districts.map((e, i) =>\n            districtsList.push({\n              id: e.district_id,\n              value: e.district_id,\n              label: e.district_name,\n              name: e.district_name,\n            })\n          );\n        }\n        setEnableDistrict(true);\n        setDistricts(districtsList);\n        setLoader(false);\n      })\n      .catch((error) => {\n        setLoader(false);\n      });\n  }, []);\n\n  const fetchStateData = React.useCallback(() => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url: \"https://cdn-api.co-vin.in/api/v2/admin/location/states\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        let stateList = [];\n        if (response.data.states) {\n          response.data.states.map((e, i) =>\n            stateList.push({\n              id: e.state_id,\n              value: e.state_id,\n              label: e.state_name,\n              name: e.state_name,\n            })\n          );\n        }\n        setStates(stateList);\n        setLoader(false);\n      })\n      .catch((error) => {\n        setLoader(false);\n      });\n  }, []);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      const enableAlertCheck = localStorage.getItem('enableAlert');\n      if (enableAlertCheck === 'true') {\n        const alertFilter = JSON.parse(localStorage.getItem('alertFilter'));\n        if (alertFilter) {\n          if (alertFilter.pinCode) {\n            fetchDataByInterval('pincode', alertFilter.pinCode);\n          } else if (alertFilter.district) {\n            fetchDataByInterval('', alertFilter.district);\n          }\n        }\n      }\n    }, alertInterval);\n    return () => clearInterval(interval);\n  }, []);\n  React.useEffect(() => {\n    fetchStateData();\n  }, [fetchStateData]);\n\n  const handleDistrictList = (value) => {\n    setEnableDistrict(false);\n    fetchDistrictData(value);\n    setSelectedState(value);\n    setVisibleResults(false);\n    setValidationError('');\n    // validationBySearch();\n    console.log(selectedState);\n    handleAlertSettings();\n  };\n\n  const handleSetDistrict = (value) => {\n    setSelectedDistrict(value);\n    setVisibleResults(false);\n    setValidationError('');\n    // validationBySearch();\n    handleAlertSettings();\n  };\n\n  const validationBySearch = (searchBy) => {\n    let validationError = false;\n    setValidationError('');\n    if (searchBy && searchBy === 'pincode') {\n      console.log('jerere code', selectedPinCode.length)\n      if (selectedPinCode === '' || (selectedPinCode.length !== 6)) {\n        setValidationError('Please enter valid pincode');\n        validationError = true;\n      } else {\n        setValidationError('');\n      }\n    } else {\n      if (selectedState === '') {\n        validationError = true;\n        setValidationError('Please select state')\n      } else if (selectedDistrict === '') {\n        validationError = true;\n        setValidationError('Please select district')\n      }\n    }\n    return validationError;\n  }\n\n  const handleSearch = (searchBy) => {\n    const validationCheck = validationBySearch(searchBy);\n    console.log(\"select date pick\", Moment(startDate).format(\"DD/MM/YY\"));\n    setSearchDate(Moment(startDate).format(\"DD/MM/YY\"));\n    if (!validationCheck) {\n      if (searchBy && searchBy === 'pincode') {\n        console.log('Search by pin', selectedPinCode);\n        setAlertFilter({\n          'pinCode': selectedPinCode,\n          'state': \"\",\n          \"district\": \"\"\n        });\n        const filterObj = {\n          pinCode: selectedPinCode,\n          district: \"\"\n        };\n        localStorage.setItem('alertFilter', JSON.stringify(filterObj));\n\n        fetchSlotByPinCodeData(selectedPinCode);\n\n      } else {\n        const filterObj = {\n          pinCode: '',\n          district: selectedDistrict\n        };\n        localStorage.setItem('alertFilter', JSON.stringify(filterObj));\n        fetchSlotData(selectedDistrict);\n\n      }\n    }\n    // if (selectedState === 0) {\n    //   setStateValidation('Please select state')\n    // } else if (selectedDistrict === 0) {\n    //   setStateValidation('');\n    //   setDistrictValidation('Please select district')\n    // } else {\n\n    // }\n\n  };\n  const getStateFilters = () => {\n    return (<>\n      <SelectSearch\n        options={states}\n        search\n        filterOptions={fuzzySearch}\n        placeholder=\"Select your state\"\n        onChange={(value) => handleDistrictList(value)}\n      />\n    </>\n    );\n  };\n\n  const getDistrictFilters = () => {\n    return (\n      <><SelectSearch\n        options={districts}\n        search\n        filterOptions={fuzzySearch}\n        placeholder=\"Select your district\"\n        onChange={(value) => handleSetDistrict(value)}\n      />\n      </>\n    );\n  };\n\n  const getPinCodeTextField = () => {\n    return (\n      <><Col className=\"form-group\" md={4} lg={4}>\n        <label >Pincode</label>\n        <input type=\"number\" className=\"form-control\" id=\"pincode\" placeholder=\"Enter pincode\" onChange={(evt) => handlePincode(evt)} />\n        {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\n      </Col>\n        {false && <Col md={4} lg={4} className=\"form-group date_picker_block\">\n          <label >Date</label>\n          {getDatePicker()}\n        </Col>}\n        {getPinCodeSearchButton()}\n      </>\n    )\n  }\n\n  const handlePincode = (event) => {\n    setSelectedPinCode(event.target.value);\n    setSelectedDistrict('');\n    // validationBySearch('pincode');\n  }\n\n  const handleSlotDetails = (slotObj) => {\n    setSelectedSlot(slotObj);\n    toggle();\n  };\n\n  const handleSwitchChange = () => {\n    setVisibleResults(false);\n    setEnableDistrict(false);\n    setEnablePinCode(!enablePinCode);\n    setSelectedDistrict('');\n    setSelectedState('');\n    setValidationError('')\n    handleAlertSettings();\n  }\n\n  const handleAlertSettings = () => {\n    localStorage.setItem('enableAlert', false);\n    localStorage.setItem('alertFilter', '');\n    setEnableAlert(false)\n  }\n\n  const getPinCodeToggle = () => {\n    return (\n      <label>\n        <span>Search By PIN </span>\n        <Switch onChange={() => handleSwitchChange()} checked={enablePinCode} />\n      </label>\n    );\n  }\n\n  const handleAlertSwitch = () => {\n    setEnableAlert(!enableAlert);\n    localStorage.setItem('enableAlert', !enableAlert);\n  }\n\n  const handleDatePicker = (dateVal) => {\n    if (dateVal) {\n      setSearchDate(Moment(dateVal).format(\"DD/MM/YY\"));\n    } else {\n      setSearchDate(Moment().format(\"DD/MM/YY\"));\n    }\n    setStartDate(dateVal);\n  }\n  const [tooltipOpen, setToolTipOpen] = useState(false);\n\n  const toggleToolTip = () => {\n    setToolTipOpen(!tooltipOpen);\n  }\n\n\n  const getAlertToggle = () => {\n    return (\n      <label className=\"custom_toggle\">\n        <span>Enable alert </span>{\"  \"}<FcInfo onMouseEnter={() => { toggleToolTip () }} />\n      <Tooltip placement=\"left\" isOpen={tooltipOpen} toggle={toggleToolTip} target=\"TooltipExample\">\n        Set alert for vaccine availablity\n      </Tooltip>\n        <Switch onChange={() => handleAlertSwitch()} checked={enableAlert} />\n      </label>\n    );\n  }\n\n  const getAlertSwitch = () => {\n\n    return (\n      <><span>Enable alert</span>{\"  \"} {\"  \"}\n    <label htmlFor=\"small-radius-switch\" className=\"custom_toggle\">\n      \n  <Switch\n    checked={enableAlert}\n    onChange={() => handleAlertSwitch()}\n    handleDiameter={24}\n    // offColor=\"#08f\"\n    // onColor=\"#0ff\"\n    // offHandleColor=\"#0ff\"\n    // onHandleColor=\"#08f\"\n    height={25}\n    width={54}\n    borderRadius={16}\n    // activeBoxShadow=\"0px 0px 1px 2px #fffc35\"\n    uncheckedIcon={<FcSpeaker />}\n    checkedIcon={<FcOk/>}\n    uncheckedHandleIcon={<FcCancel />}\n    checkedHandleIcon={<FcSpeaker />}\n    className=\"react-switch\"\n    id=\"small-radius-switch\"\n  />\n</label></>)\n  }\n\n\n  const getAvailableCenters = () => {\n\n    return (\n      <Table>\n        <Thead>\n          <Tr>\n            <Th>#</Th>\n            <Th>Center</Th>\n            <Th>Fee</Th>\n            <Th>Availability</Th>\n            <Th>Time</Th>\n            <Th>Status</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {availableSlots.map((slot, key) => {\n            let availableCapacity = 0;\n            slot.sessions.map((session) => {\n              availableCapacity += session.available_capacity;\n              return true;\n            });\n            let btnColor = 'success';\n            if (availableCapacity < 10 && availableCapacity > 0) {\n              btnColor = 'danger';\n            } else if (availableCapacity > 10 && availableCapacity < 75) {\n              btnColor = 'warning';\n            } else if (availableCapacity === 0) {\n              btnColor = 'dark'\n            }\n            return (\n              <Tr key={\"slot-\" + key} className={availableCapacity > 0 ? 'available' : ''}>\n                <Td className=\"pt-2\">{key + 1}</Td>\n                <Td className=\"pt-2\">{slot.name}\n                  {/* <br/>{slot.address.length > 35 ? slot.address.substring(0, 35) + \"...\" : slot.address} */}\n                </Td>\n                <Td className=\"pt-2\">{slot.fee_type}</Td>\n                <Td>\n\n                  <Badge pill color={btnColor} onClick={() => handleSlotDetails(slot)}>\n                    {availableCapacity}\n                  </Badge>\n                </Td>\n                <Td className=\"pt-2\">\n                  {TimeFormat(slot.from)} - {TimeFormat(slot.to)}\n                </Td>\n                <Td className=\"pt-2\" style={{ cursor: 'pointer' }}>\n                  <Badge color=\"info\" onClick={() => handleSlotDetails(slot)}>\n                    Details\n                  </Badge>\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </Table>\n    );\n  };\n  const getPinCodeSearchButton = () => {\n    return (\n      <Col\n        sm={3}\n        className=\"mt-2\"\n        mt={1}\n        style={{ alignItems: \"center\", justifyContent: \"center\" }}\n      >\n        <label style={{ maxHeight: '16px', color: 'red' }}>{validationError}</label>\n        <div className=\"rdn\">\n          {loader ? (\n            <SpinnerBlock />\n          ) : (\n            <ButtonToggle\n              color=\"primary\"\n              onClick={() => {\n                handleSearch('pincode');\n              }}\n            >\n              Search\n            </ButtonToggle>\n          )}\n        </div>\n      </Col>\n    )\n  };\n\n  const getSearchButton = () => {\n    return (\n      <Col\n        sm={2}\n        className=\"mt-2\"\n        mt={2}\n        style={{ alignItems: \"flex-end\", justifyContent: \"center\" }}\n      >\n        <label style={{ height: '16px', color: 'red' }}>{validationError}</label>\n        <div className=\"rdn\">\n          {loader ? (\n            <SpinnerBlock />\n          ) : (\n            <ButtonToggle\n              color=\"primary\"\n              onClick={() => {\n                handleSearch();\n              }}\n            >\n              Search\n            </ButtonToggle>\n          )}\n        </div>\n      </Col>\n    )\n  };\n\n  const getDatePicker = () => {\n    return (\n      <DatePicker style={{ height: \"inherit\" }} selected={startDate} onChange={date => handleDatePicker(date)} />\n    );\n  }\n\n  const getResults = () => {\n    return (\n      visibleResults &&\n      <div>\n        <h4 className=\"mt-3\">Slot & Sessions</h4>\n        <div className=\"widget-padding-md\">\n          <Row>\n            <Col lg={8} md={8} sm={8}>\n              {availableSlots && availableSlots.length > 0 && (<p>\n                Total{\" \"}\n                <b>\n                  <code>{availableSlots && availableSlots.length}</code>{\" \"}\n                </b>\n                  vaccination centers available now.\n              </p>)}\n              \n            </Col>\n            <Col lg={4} md={4} sm={4} style={{display: 'flex',alignItems: 'center', justifyContent: 'flex-end'}}>\n              {getAlertSwitch()}\n            </Col>\n          </Row>\n          <Row>\n          <Col md={12} lg={12}>\n            {availableSlots && availableSlots.length > 0\n                ? getAvailableCenters()\n                : \"No Vaccination center is available for booking.\"}\n            </Col>\n          </Row>\n        </div>\n      </div>)\n\n  }\n\n  const calenderComponent = () => {\n    return (\n      <DatePicker\n        onChange={setSelectDate}\n        value={selectDate}\n      />\n    )\n  }\n\n  const checkBoxComponent = () => {\n    return (\n      <input type=\"checkbox\" class=\"checkbox\" style={{ size: '20px', radius: '8px', bg: '#000000', color: '#F47A37', time: '0.4s' }} {...checked} />\n    )\n  }\n\n\n\n  const slotFinder = () => {\n    return (<><Col sm={4} className=\"mt-3\" mt={2}>\n      <h6>State</h6>\n      {getStateFilters()}\n    </Col>\n      {enableDistrict && <Col sm={3} className=\"mt-3\" mt={2}>\n        <h6>District</h6>\n        {getDistrictFilters()}\n      </Col>\n      }\n      {false && <Col md={3} lg={3} className=\"form-group date_picker_block mt-2\">\n        <label >Date</label>\n        {getDatePicker()}\n      </Col>}\n      {getSearchButton()}\n\n    </>\n\n    )\n  };\n\n  const getModalData = () => {\n    let slotsAvailable = 0;\n    selectedSlot.sessions.map((session) => {\n      slotsAvailable += session.slots.length;\n      return true;\n    });\n    return (\n      <Modal\n        isOpen={modal}\n        toggle={toggle}\n        className={className}\n        backdrop={backdrop}\n        keyboard={keyboard}\n      >\n        <ModalHeader toggle={toggle}><span><b>{selectedSlot && selectedSlot.name}</b> - {selectedSlot && selectedSlot.address}(#<b>{slotsAvailable}</b>) slots</span>\n        </ModalHeader>\n        <ModalBody>\n          <Table>\n            <Thead>\n              <Tr>\n                <Th style={{ width: '12%' }}>Date</Th>\n                <Th style={{ width: '12%' }}>Vaccine</Th>\n                <Th style={{ width: '14%' }}>From Age</Th>\n                <Th style={{ width: '15%' }}>Availability</Th>\n                <Th>Slots</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {selectedSlot.sessions.map((session, key) => {\n                let btnColor = 'success';\n                const availableCapacity = session.available_capacity\n                if (availableCapacity < 10 && availableCapacity > 0) {\n                  btnColor = 'danger';\n                } else if (availableCapacity > 10 && availableCapacity < 75) {\n                  btnColor = 'warning';\n                } else if (availableCapacity === 0) {\n                  btnColor = 'dark'\n                }\n                return (\n                  <Tr key={\"slots-block-\" + key}>\n                    <Td className=\"pt-2\">{session.date}</Td>\n                    <Td className=\"pt-2\"><Badge href=\"#\" color=\"info\">{session.vaccine}</Badge></Td>\n                    <Td className=\"pt-2\">{session.min_age_limit}+</Td>\n                    <Td>\n                      <Badge pill color={btnColor}>\n                        {availableCapacity}\n                      </Badge>\n                    </Td>\n                    <Td className=\"pt-2\">\n                      {session.slots.map((slot, keyId) => {\n                        return (<span key={\"slot-time\" + keyId}><Badge pill href=\"#\" color=\"success\">{slot}</Badge> {\" \"}</span>)\n                      })}\n                    </Td>\n\n                  </Tr>\n                );\n              })}\n            </Tbody>\n          </Table>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggle}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  };\n\n  const getCheckBox = () => {\n    return (\n      visibleResults && <Row className=\"mt-4\">\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"} Free\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  Paid\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  Covaxin\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  Covishield\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  18+\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  45+\n                      </Col>\n      </Row>\n    )\n  }\n\n  return (\n    <Section id=\"contact\">\n      <div className=\"container pt-2 pb-5\">\n        <div className=\"section-header pt-5 pb-5 text-center\"></div>\n        <div className=\"section-content\">\n          <div className=\"row\">\n            <div className=\"col-md-12 col-lg-12 mr-auto ml-auto\">\n              <Row>\n                <Col md={12} lg={12} style={{ display: 'flex' }}>\n                  <h4 className=\"page-title\">\n                    Vaccine Slot -{\" \"}\n                    <span className=\"fw-semi-bold\">Availability</span>\n                  </h4>\n                </Col>\n              </Row>\n              <Row>\n                <Col md={12} lg={12} style={{ display: 'flex' }} className=\"mt-2\">\n                  <Col md={6} lg={6} className=\"alert_toggle p-0\">\n                    {/* {getAlertToggle()} */}\n                  </Col>\n\n                  <Col md={6} lg={6} className=\"pincode_toggle p-0\">\n                    {getPinCodeToggle()}\n                  </Col>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col xs={12} lg={12}>\n                  <div className=\"widget-padding-md\">\n                    <Row>\n                      {enablePinCode ? getPinCodeTextField() : slotFinder()}\n                      { }\n                    </Row>\n\n                    {/* {getCheckBox()} */}\n                    {getResults()}\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          </div>\n        </div>\n        {modal && getModalData()}\n      </div>\n    </Section>\n  );\n}\n\nexport default VaccineSlot;\n","import React, { useState, useInterval } from \"react\"; \nimport {\n  Row,\n  Col,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Badge,\n} from \"reactstrap\";\nimport './Tabs.scss';\n// Dummy data\nconst tabData = [\n    [\n      {\n        name: 'Search By PIN',\n        content: `Apple Inc. is an American multinational technology company headquartered in Cupertino, California that designs, develops, and sells consumer electronics, computer software, and online services. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, and the Apple TV digital media player. Apple's consumer software includes the macOS and iOS operating systems, the iTunes media player, the Safari web browser, and the iLife and iWork creativity and productivity suites. Its online services include the iTunes Store, the iOS App Store and Mac App Store, Apple Music, and iCloud.`,\n      },\n      {\n        name: 'Search By District',\n        content: `Google is an American multinational technology company specializing in Internet-related services and products. These include online advertising technologies, search, cloud computing, software, and hardware. Google was founded in 1998 by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University, in California. Together, they own about 14 percent of its shares, and control 56 percent of the stockholder voting power through supervoting stock. They incorporated Google as a privately held company on September 4, 1998. An initial public offering (IPO) took place on August 19, 2004, and Google moved to its new headquarters in Mountain View, California, nicknamed the Googleplex. In August 2015, Google announced plans to reorganize its various interests as a conglomerate called Alphabet Inc. Google, Alphabet's leading subsidiary, will continue to be the umbrella company for Alphabet's Internet interests. Upon completion of the restructure, Sundar Pichai became CEO of Google, replacing Larry Page, who became CEO of Alphabet.`,\n      },\n      {\n        name: 'Search By Date',\n        content: `Facebook is an American for-profit corporation and an online social media and social networking service based in Menlo Park, California. The Facebook website was launched on February 4, 2004, by Mark Zuckerberg, along with fellow Harvard College students and roommates, Eduardo Saverin, Andrew McCollum, Dustin Moskovitz, and Chris Hughes`,\n      },\n    ]\n  ];\n  \n  /*\n  *\n  * App wrapper\n  *\n  */\n  const App = () =>\n    <div class=\"App\">\n      <TabContainer defaultTab={0} tabData={tabData[0]}/>\n    </div>;\n  \n  /*\n  *\n  * TabPanel component. \n  * Displays content data passed down by TabContainer.\n  *\n  */\n  const TabPanel = ({ content }) => \n    <div className=\"TabPanel\">\n      <p>{content}</p>\n    </div>;\n  \n  /*\n  *\n  * Tab component.\n  *\n  */\n  class Tab extends React.Component {\n    _handleClick(e) {\n      const { setCurrentTab, index } = this.props;\n      setCurrentTab(index);\n    }\n  \n    render() {\n      const { text, isSelected } = this.props;\n      return (\n        <Col\n          md=\"4\"\n          lg=\"4\" \n          className={`Tab${isSelected ? ' is-selected' : ''}`} \n          onClick={this._handleClick.bind(this)}>\n          {text}\n        </Col>\n      );\n    }\n  }\n  \n  /*\n  *\n  * TabContainer component.\n  *\n  */\n  class TabContainer extends React.Component {\n    constructor(props) {\n      super(props);\n  \n      // Set initial state\n      this.state = {\n        currentTab: this.props.defaultTab,\n      };\n      \n      // Dummy data\n      this._tabData = this.props.tabData;\n    }\n  \n    _setCurrentTab(currentTab) {\n      // Don't re-render if current tab is clicked again\n      if (this.state.currentTab === currentTab) {\n        return;\n      }\n      this.setState({ currentTab });\n    }\n  \n    _renderTabs() {\n      // Map data to Tab component. \n      // Pass index down so we can send it up to this.state later.\n      return (\n        <ul md=\"12\" className=\"Tabs\">\n          {\n            this._tabData.map((tab, index) => {\n              return (\n                <Tab\n                  index={index}\n                  text={tab.name}\n                  isSelected={this.state.currentTab === index}\n                  setCurrentTab={this._setCurrentTab.bind(this)}\n                />\n              )\n            })\n          }\n        </ul>\n      );\n    }\n  \n    _renderTabPanel() {\n      // Map data to TabPanel component\n      return this._tabData.map((tab, index) => {\n        if (this.state.currentTab === index) {\n          return (\n            <TabPanel \n              content={tab.content} />\n          );\n        }\n      });\n    }\n  \n    render() {\n      const Tabs = this._renderTabs();\n      const TabPanel = this._renderTabPanel();\n      return (\n        <div className=\"TabContainer\">\n          {Tabs}\n          {/* {TabPanel} */}\n        </div>\n      );\n    }\n  }\n\n  export default App;","import React, { useState, useInterval } from \"react\";\nimport axios from \"axios\";\nimport { Table, Thead, Tbody, Tr, Th, Td } from \"react-super-responsive-table\";\nimport {\n  Row,\n  Col,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Badge,\n} from \"reactstrap\";\nimport \"react-dropdown-now/style.css\";\nimport { ButtonToggle } from \"reactstrap\";\nimport SpinnerBlock from \"./spinner\";\nimport Moment from \"moment\";\nimport SelectSearch from \"react-select-search\";\nimport \"react-select-search/style.css\";\nimport fuzzySearch from \"../../../util/search\";\nimport Section from \"../../../HOC/Section\";\nimport \"./index.scss\";\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\nimport TimeFormat from '../../../util/common';\nimport Switch from \"react-switch\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"checkboxes/dist/css/checkboxes.min.css\";\n// import DatePicker from 'react-date-picker';\nimport useSound from 'use-sound';\n\nimport alertMp3 from '../../../assets/mp3/alert.mp3';\nimport CoolTabs from \"../../Tabs/CoolTabs\";\n\nfunction VaccineSlot(props) {\n  let [states, setStates] = React.useState([]);\n  let [districts, setDistricts] = React.useState([]);\n  let [selectedState, setSelectedState] = React.useState('');\n  let [selectedDistrict, setSelectedDistrict] = React.useState('');\n  let [enableDistrict, setEnableDistrict] = React.useState(false);\n  let [loader, setLoader] = React.useState(false);\n  let [availableSlots, setAvailableSlots] = React.useState([]);\n  const [modal, setModal] = useState(false);\n  const [backdrop] = useState(true);\n  const [keyboard] = useState(true);\n  const [selectedSlot, setSelectedSlot] = useState([]);\n  const [visibleResults, setVisibleResults] = useState(false);\n  const [enablePinCode, setEnablePinCode] = useState(false);\n  const [selectedPinCode, setSelectedPinCode] = useState('');\n  const { className } = props;\n  const toggle = () => setModal(!modal);\n  const [searchDate, setSearchDate] = useState(Moment().format(\"DD/MM/YY\"));\n  const [startDate, setStartDate] = useState(new Date());\n  const [validationError, setValidationError] = useState('');\n  const [selectDate, setSelectDate] = useState(new Date());\n  const [checked, setChecked] = useState(true);\n  const [enableAlert, setEnableAlert] = useState(false);\n  const [alertFilter, setAlertFilter] = useState({})\n  const alertInterval = 150000;\n  const [audio] = useState(new Audio(alertMp3));\n  React.useEffect(() => {\n    localStorage.setItem('enableAlert', false);\n    localStorage.setItem('alertFilter', '')\n  }, []);\n  // set interval alert data\n  const fetchDataByInterval = React.useCallback((searchBy, dId) => {\n    setLoader(true);\n    let url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=\" + dId + \"&date=\" + searchDate;\n    if (searchBy && searchBy === 'pincode') {\n      url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin?pincode=\" + dId + \"&date=\" + searchDate;\n    }\n    axios({\n      method: \"GET\",\n      url: url,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        // if (response.data.centers)\n        if (response.data.centers && response.data.centers.length > 0) {\n          let isAvailableCount = 0;\n\n          response.data.centers.map((slot, key) => {\n            slot.sessions.map((session) => {\n              isAvailableCount += session.available_capacity;\n              return true;\n            });\n          });\n\n          if (isAvailableCount && isAvailableCount > 0) {\n            console.log('here alert ', isAvailableCount);\n            audio.play();\n          } else {\n            console.log('here no alert ', isAvailableCount);\n          }\n\n        }\n        setAvailableSlots(response.data.centers);\n        setLoader(false);\n        setVisibleResults(true);\n      })\n      .catch((error) => {\n        setLoader(false);\n        setVisibleResults(false);\n      });\n  }, []);\n\n  const [play, { stop }] = useSound(\n    \"http://localhost:3000/static/media/alert.0bd3827c.mp3\",\n    { volume: 0.5 }\n  );\n\n\n\n\n  // Fetch data from API - https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByPin?pincode=110001&date=31-03-2021\n  const fetchSlotByPinCodeData = React.useCallback((dId) => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url:\n        \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin?pincode=\" + dId + \"&date=\" + searchDate,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        // if (response.data.centers)\n        setAvailableSlots(response.data.centers);\n        setLoader(false);\n        setVisibleResults(true);\n      })\n      .catch((error) => {\n        setLoader(false);\n        setVisibleResults(false);\n      });\n  }, [searchDate]);\n\n\n  const fetchSlotData = React.useCallback((dId) => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url:\n        \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=\" +\n        dId +\n        \"&date=\" +\n        searchDate,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        // if (response.data.centers)\n        setAlertFilter({\n          pinCode: '',\n          state: selectedState,\n          district: selectedDistrict\n        })\n        setAvailableSlots(response.data.centers);\n        setLoader(false);\n        setVisibleResults(true);\n      })\n      .catch((error) => {\n        setLoader(false);\n        setVisibleResults(false);\n      });\n  }, [searchDate]);\n\n  const fetchDistrictData = React.useCallback((state_id) => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url:\n        \"https://cdn-api.co-vin.in/api/v2/admin/location/districts/\" + state_id,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        let districtsList = [];\n        if (response.data.districts) {\n          response.data.districts.map((e, i) =>\n            districtsList.push({\n              id: e.district_id,\n              value: e.district_id,\n              label: e.district_name,\n              name: e.district_name,\n            })\n          );\n        }\n        setEnableDistrict(true);\n        setDistricts(districtsList);\n        setLoader(false);\n      })\n      .catch((error) => {\n        setLoader(false);\n      });\n  }, []);\n\n  const fetchStateData = React.useCallback(() => {\n    setLoader(true);\n    axios({\n      method: \"GET\",\n      url: \"https://cdn-api.co-vin.in/api/v2/admin/location/states\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        let stateList = [];\n        if (response.data.states) {\n          response.data.states.map((e, i) =>\n            stateList.push({\n              id: e.state_id,\n              value: e.state_id,\n              label: e.state_name,\n              name: e.state_name,\n            })\n          );\n        }\n        setStates(stateList);\n        setLoader(false);\n      })\n      .catch((error) => {\n        setLoader(false);\n      });\n  }, []);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      const enableAlertCheck = localStorage.getItem('enableAlert');\n      if (enableAlertCheck === 'true') {\n        const alertFilter = JSON.parse(localStorage.getItem('alertFilter'));\n        if (alertFilter) {\n          if (alertFilter.pinCode) {\n            fetchDataByInterval('pincode', alertFilter.pinCode);\n          } else if (alertFilter.district) {\n            fetchDataByInterval('', alertFilter.district);\n          }\n        }\n      }\n    }, alertInterval);\n    return () => clearInterval(interval);\n  }, []);\n  React.useEffect(() => {\n    fetchStateData();\n  }, [fetchStateData]);\n\n  const handleDistrictList = (value) => {\n    setEnableDistrict(false);\n    fetchDistrictData(value);\n    setSelectedState(value);\n    setVisibleResults(false);\n    setValidationError('');\n    // validationBySearch();\n    console.log(selectedState);\n    handleAlertSettings();\n  };\n\n  const handleSetDistrict = (value) => {\n    setSelectedDistrict(value);\n    setVisibleResults(false);\n    setValidationError('');\n    // validationBySearch();\n    handleAlertSettings();\n  };\n\n  const validationBySearch = (searchBy) => {\n    let validationError = false;\n    setValidationError('');\n    if (searchBy && searchBy === 'pincode') {\n      console.log('jerere code', selectedPinCode.length)\n      if (selectedPinCode === '' || (selectedPinCode.length !== 6)) {\n        setValidationError('Please enter valid pincode');\n        validationError = true;\n      } else {\n        setValidationError('');\n      }\n    } else {\n      if (selectedState === '') {\n        validationError = true;\n        setValidationError('Please select state')\n      } else if (selectedDistrict === '') {\n        validationError = true;\n        setValidationError('Please select district')\n      }\n    }\n    return validationError;\n  }\n\n  const handleSearch = (searchBy) => {\n    const validationCheck = validationBySearch(searchBy);\n    console.log(\"select date pick\", Moment(startDate).format(\"DD/MM/YY\"));\n    setSearchDate(Moment(startDate).format(\"DD/MM/YY\"));\n    if (!validationCheck) {\n      if (searchBy && searchBy === 'pincode') {\n        console.log('Search by pin', selectedPinCode);\n        setAlertFilter({\n          'pinCode': selectedPinCode,\n          'state': \"\",\n          \"district\": \"\"\n        });\n        const filterObj = {\n          pinCode: selectedPinCode,\n          district: \"\"\n        };\n        localStorage.setItem('alertFilter', JSON.stringify(filterObj));\n\n        fetchSlotByPinCodeData(selectedPinCode);\n\n      } else {\n        const filterObj = {\n          pinCode: '',\n          district: selectedDistrict\n        };\n        localStorage.setItem('alertFilter', JSON.stringify(filterObj));\n        fetchSlotData(selectedDistrict);\n\n      }\n    }\n    // if (selectedState === 0) {\n    //   setStateValidation('Please select state')\n    // } else if (selectedDistrict === 0) {\n    //   setStateValidation('');\n    //   setDistrictValidation('Please select district')\n    // } else {\n\n    // }\n\n  };\n  const getStateFilters = () => {\n    return (<>\n      <SelectSearch\n        options={states}\n        search\n        filterOptions={fuzzySearch}\n        placeholder=\"Select your state\"\n        onChange={(value) => handleDistrictList(value)}\n      />\n    </>\n    );\n  };\n\n  const getDistrictFilters = () => {\n    return (\n      <><SelectSearch\n        options={districts}\n        search\n        filterOptions={fuzzySearch}\n        placeholder=\"Select your district\"\n        onChange={(value) => handleSetDistrict(value)}\n      />\n      </>\n    );\n  };\n\n  const getPinCodeTextField = () => {\n    return (\n      <><Col className=\"form-group\" md={4} lg={4}>\n        <label >Pincode</label>\n        <input type=\"number\" className=\"form-control\" id=\"pincode\" placeholder=\"Enter pincode\" onChange={(evt) => handlePincode(evt)} />\n        {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\n      </Col>\n        {false && <Col md={4} lg={4} className=\"form-group date_picker_block\">\n          <label >Date</label>\n          {getDatePicker()}\n        </Col>}\n        {getPinCodeSearchButton()}\n      </>\n    )\n  }\n\n  const handlePincode = (event) => {\n    setSelectedPinCode(event.target.value);\n    setSelectedDistrict('');\n    // validationBySearch('pincode');\n  }\n\n  const handleSlotDetails = (slotObj) => {\n    setSelectedSlot(slotObj);\n    toggle();\n  };\n\n  const handleSwitchChange = () => {\n    setVisibleResults(false);\n    setEnableDistrict(false);\n    setEnablePinCode(!enablePinCode);\n    setSelectedDistrict('');\n    setSelectedState('');\n    setValidationError('')\n    handleAlertSettings();\n  }\n\n  const handleAlertSettings = () => {\n    localStorage.setItem('enableAlert', false);\n    localStorage.setItem('alertFilter', '');\n    setEnableAlert(false)\n  }\n\n  const getPinCodeToggle = () => {\n    return (\n      <label>\n        <span>Search By PIN </span>\n        <Switch onChange={() => handleSwitchChange()} checked={enablePinCode} />\n      </label>\n    );\n  }\n\n  const handleAlertSwitch = () => {\n    setEnableAlert(!enableAlert);\n    localStorage.setItem('enableAlert', !enableAlert);\n  }\n\n  const handleDatePicker = (dateVal) => {\n    if (dateVal) {\n      setSearchDate(Moment(dateVal).format(\"DD/MM/YY\"));\n    } else {\n      setSearchDate(Moment().format(\"DD/MM/YY\"));\n    }\n    setStartDate(dateVal);\n  }\n\n\n  const getAlertToggle = () => {\n    return (\n      <label>\n        <span>Enable alert </span>\n        <Switch onChange={() => handleAlertSwitch()} checked={enableAlert} />\n      </label>\n    );\n  }\n\n\n  const getAvailableCenters = () => {\n\n    return (\n      <Table>\n        <Thead>\n          <Tr>\n            <Th>#</Th>\n            <Th>Center</Th>\n            <Th>Fee</Th>\n            <Th>Availability</Th>\n            <Th>Time</Th>\n            <Th>Status</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {availableSlots.map((slot, key) => {\n            let availableCapacity = 0;\n            slot.sessions.map((session) => {\n              availableCapacity += session.available_capacity;\n              return true;\n            });\n            let btnColor = 'success';\n            if (availableCapacity < 10 && availableCapacity > 0) {\n              btnColor = 'danger';\n            } else if (availableCapacity > 10 && availableCapacity < 75) {\n              btnColor = 'warning';\n            } else if (availableCapacity === 0) {\n              btnColor = 'dark'\n            }\n            return (\n              <Tr key={\"slot-\" + key} className={availableCapacity > 0 ? 'available' : ''}>\n                <Td className=\"pt-2\">{key + 1}</Td>\n                <Td className=\"pt-2\">{slot.name}\n                  {/* <br/>{slot.address.length > 35 ? slot.address.substring(0, 35) + \"...\" : slot.address} */}\n                </Td>\n                <Td className=\"pt-2\">{slot.fee_type}</Td>\n                <Td>\n\n                  <Badge pill color={btnColor} onClick={() => handleSlotDetails(slot)}>\n                    {availableCapacity}\n                  </Badge>\n                </Td>\n                <Td className=\"pt-2\">\n                  {TimeFormat(slot.from)} - {TimeFormat(slot.to)}\n                </Td>\n                <Td className=\"pt-2\" style={{ cursor: 'pointer' }}>\n                  <Badge color=\"info\" onClick={() => handleSlotDetails(slot)}>\n                    Details\n                  </Badge>\n                </Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </Table>\n    );\n  };\n  const getPinCodeSearchButton = () => {\n    return (\n      <Col\n        sm={3}\n        className=\"mt-2\"\n        mt={1}\n        style={{ alignItems: \"center\", justifyContent: \"center\" }}\n      >\n        <label style={{ maxHeight: '16px', color: 'red' }}>{validationError}</label>\n        <div className=\"rdn\">\n          {loader ? (\n            <SpinnerBlock />\n          ) : (\n            <ButtonToggle\n              color=\"primary\"\n              onClick={() => {\n                handleSearch('pincode');\n              }}\n            >\n              Search\n            </ButtonToggle>\n          )}\n        </div>\n      </Col>\n    )\n  };\n\n  const getSearchButton = () => {\n    return (\n      <Col\n        sm={2}\n        className=\"mt-2\"\n        mt={2}\n        style={{ alignItems: \"flex-end\", justifyContent: \"center\" }}\n      >\n        <label style={{ height: '16px', color: 'red' }}>{validationError}</label>\n        <div className=\"rdn\">\n          {loader ? (\n            <SpinnerBlock />\n          ) : (\n            <ButtonToggle\n              color=\"primary\"\n              onClick={() => {\n                handleSearch();\n              }}\n            >\n              Search\n            </ButtonToggle>\n          )}\n        </div>\n      </Col>\n    )\n  };\n\n  const getDatePicker = () => {\n    return (\n      <DatePicker style={{ height: \"inherit\" }} selected={startDate} onChange={date => handleDatePicker(date)} />\n    );\n  }\n\n  const getResults = () => {\n    return (\n      visibleResults &&\n      <div>\n        <h4 className=\"mt-3\">Slot & Sessions</h4>\n        <div className=\"widget-padding-md\">\n          <Row>\n            <Col lg={12} md={12} sm={12}>\n              {availableSlots && availableSlots.length > 0 && (<p>\n                Total{\" \"}\n                <b>\n                  <code>{availableSlots && availableSlots.length}</code>{\" \"}\n                </b>\n                  vaccination centers available now.\n              </p>)}\n              {availableSlots && availableSlots.length > 0\n                ? getAvailableCenters()\n                : \"No Vaccination center is available for booking.\"}\n            </Col>\n          </Row>\n        </div>\n      </div>)\n\n  }\n\n  const calenderComponent = () => {\n    return (\n      <DatePicker\n        onChange={setSelectDate}\n        value={selectDate}\n      />\n    )\n  }\n\n  const checkBoxComponent = () => {\n    return (\n      <input type=\"checkbox\" class=\"checkbox\" style={{ size: '20px', radius: '8px', bg: '#000000', color: '#F47A37', time: '0.4s' }} {...checked} />\n    )\n  }\n\n\n\n  const slotFinder = () => {\n    return (<><Col sm={4} className=\"mt-3\" mt={2}>\n      <h6>State</h6>\n      {getStateFilters()}\n    </Col>\n      {enableDistrict && <Col sm={3} className=\"mt-3\" mt={2}>\n        <h6>District</h6>\n        {getDistrictFilters()}\n      </Col>\n      }\n      {false && <Col md={3} lg={3} className=\"form-group date_picker_block mt-2\">\n        <label >Date</label>\n        {getDatePicker()}\n      </Col>}\n      {getSearchButton()}\n\n    </>\n\n    )\n  };\n\n  const getModalData = () => {\n    let slotsAvailable = 0;\n    selectedSlot.sessions.map((session) => {\n      slotsAvailable += session.slots.length;\n      return true;\n    });\n    return (\n      <Modal\n        isOpen={modal}\n        toggle={toggle}\n        className={className}\n        backdrop={backdrop}\n        keyboard={keyboard}\n      >\n        <ModalHeader toggle={toggle}><span><b>{selectedSlot && selectedSlot.name}</b> - {selectedSlot && selectedSlot.address}(#<b>{slotsAvailable}</b>) slots</span>\n        </ModalHeader>\n        <ModalBody>\n          <Table>\n            <Thead>\n              <Tr>\n                <Th style={{ width: '12%' }}>Date</Th>\n                <Th style={{ width: '12%' }}>Vaccine</Th>\n                <Th style={{ width: '14%' }}>From Age</Th>\n                <Th style={{ width: '15%' }}>Availability</Th>\n                <Th>Slots</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {selectedSlot.sessions.map((session, key) => {\n                let btnColor = 'success';\n                const availableCapacity = session.available_capacity\n                if (availableCapacity < 10 && availableCapacity > 0) {\n                  btnColor = 'danger';\n                } else if (availableCapacity > 10 && availableCapacity < 75) {\n                  btnColor = 'warning';\n                } else if (availableCapacity === 0) {\n                  btnColor = 'dark'\n                }\n                return (\n                  <Tr key={\"slots-block-\" + key}>\n                    <Td className=\"pt-2\">{session.date}</Td>\n                    <Td className=\"pt-2\"><Badge href=\"#\" color=\"info\">{session.vaccine}</Badge></Td>\n                    <Td className=\"pt-2\">{session.min_age_limit}+</Td>\n                    <Td>\n                      <Badge pill color={btnColor}>\n                        {availableCapacity}\n                      </Badge>\n                    </Td>\n                    <Td className=\"pt-2\">\n                      {session.slots.map((slot, keyId) => {\n                        return (<span key={\"slot-time\" + keyId}><Badge pill href=\"#\" color=\"success\">{slot}</Badge> {\" \"}</span>)\n                      })}\n                    </Td>\n\n                  </Tr>\n                );\n              })}\n            </Tbody>\n          </Table>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggle}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  };\n\n  const getCheckBox = () => {\n    return (\n      visibleResults && <Row className=\"mt-4\">\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"} Free\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  Paid\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  Covaxin\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  Covishield\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  18+\n                      </Col>\n        <Col md={2} lg={2} style={{ display: 'flex', alignItems: 'center' }}>\n          {checkBoxComponent()}{\" \"}  45+\n                      </Col>\n      </Row>\n    )\n  }\n\n  return (\n    <Section id=\"contact\">\n      <div className=\"container pt-2 pb-5\">\n        <div className=\"section-header pt-5 pb-5 text-center\"></div>\n        <div className=\"section-content\">\n          <div className=\"row\">\n            <div className=\"col-md-12 col-lg-12 mr-auto ml-auto\">\n              <Row>\n                <Col md={12} lg={12} style={{ display: 'flex' }}>\n                  <h4 className=\"page-title\">\n                    Vaccine Slot -{\" \"}\n                    <span className=\"fw-semi-bold\">Availability</span>\n                  </h4>\n                </Col>\n              </Row>\n              <Row>\n                <Col md=\"12\" lg=\"12\">\n                  <CoolTabs />\n                </Col>\n                \n              </Row>\n              <Row>\n                <Col md={12} lg={12} style={{ display: 'flex' }} className=\"mt-2\">\n                  <Col md={6} lg={6} className=\"alert_toggle p-0\">\n                    {getAlertToggle()}\n                  </Col>\n\n                  <Col md={6} lg={6} className=\"pincode_toggle p-0\">\n                    {getPinCodeToggle()}\n                  </Col>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col xs={12} lg={12}>\n                  <div className=\"widget-padding-md\">\n                    <Row>\n                      {enablePinCode ? getPinCodeTextField() : slotFinder()}\n                      { }\n                    </Row>\n\n                    {/* {getCheckBox()} */}\n                    {getResults()}\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          </div>\n        </div>\n        {modal && getModalData()}\n      </div>\n    </Section>\n  );\n}\n\nexport default VaccineSlot;\n","import React, { Fragment } from 'react';\nimport VaccineSlot from './VaccineSlot/index';\nimport VaccineSlotNew from \"./VaccineSlotNew/index\";\n\nconst sections = () => {\n  return (\n    <Fragment>\n      <VaccineSlot />\n      {/* <VaccineSlotNew /> */}\n    </Fragment>\n  );\n};\n\nexport default sections;\n","import React, { Fragment } from 'react';\n\nimport Header from '../UI/Header/Header';\nimport Footer from '../UI/Footer/Footer';\nimport Sections from '../sections/Sections';\n\nconst Layout = () => {\n  return (\n    <Fragment>\n      <Header />\n      <main style={{minHeight: '100vh'}}>\n        <Sections />\n      </main>\n      <Footer />\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\n\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n  return <Layout />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './scss/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/alert.0bd3827c.mp3\";"],"sourceRoot":""}